{"ast":null,"code":"// src/services/api.js\n\n// Giriş simülasyonu\nexport const loginUser = async ({\n  username,\n  password\n}) => {\n  return new Promise((resolve, reject) => {\n    if (username === 'admin' && password === '12345678') {\n      localStorage.setItem('role', 'Admin');\n      localStorage.setItem('username', 'admin');\n      resolve({\n        data: {\n          token: 'mock-token',\n          refreshToken: 'mock-refresh-token'\n        }\n      });\n    } else if (username === 'user' && password === '12345678') {\n      localStorage.setItem('role', 'User');\n      localStorage.setItem('username', 'user');\n      resolve({\n        data: {\n          token: 'mock-token',\n          refreshToken: 'mock-refresh-token'\n        }\n      });\n    } else {\n      reject(new Error('Invalid credentials'));\n    }\n  });\n};\n\n// Loglar mock\nexport const getLogs = async () => {\n  return Promise.resolve({\n    data: [{\n      id: 1,\n      username: 'admin',\n      type: 'BG',\n      createdDate: '2025-10-01 10:00'\n    }, {\n      id: 2,\n      username: 'admin',\n      type: 'PD',\n      createdDate: '2025-10-01 11:00'\n    }, {\n      id: 3,\n      username: 'admin',\n      type: 'LO',\n      createdDate: '2025-10-01 12:00'\n    }]\n  });\n};\n\n// Roller mock\nexport const getRoles = async () => {\n  return Promise.resolve({\n    data: [{\n      id: 1,\n      name: 'Admin'\n    }, {\n      id: 2,\n      name: 'User'\n    }]\n  });\n};\n\n// Kullanıcılar mock\nexport const getUsers = async () => {\n  return Promise.resolve({\n    data: [{\n      id: 1,\n      username: 'admin',\n      firstName: 'Sema',\n      lastName: 'Özyılmaz',\n      email: 'admin@smartspirit.ai',\n      phoneNumber: '555-1234',\n      role: 'Admin',\n      status: 'active'\n    }, {\n      id: 2,\n      username: 'user',\n      firstName: 'Ali',\n      lastName: 'Yılmaz',\n      email: 'user@smartspirit.ai',\n      phoneNumber: '555-5678',\n      role: 'User',\n      status: 'passive'\n    }]\n  });\n};","map":{"version":3,"names":["loginUser","username","password","Promise","resolve","reject","localStorage","setItem","data","token","refreshToken","Error","getLogs","id","type","createdDate","getRoles","name","getUsers","firstName","lastName","email","phoneNumber","role","status"],"sources":["/Users/sema/Desktop/project/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\n\n// Giriş simülasyonu\nexport const loginUser = async ({ username, password }) => {\n  return new Promise((resolve, reject) => {\n    if (username === 'admin' && password === '12345678') {\n      localStorage.setItem('role', 'Admin')\n      localStorage.setItem('username', 'admin')\n      resolve({\n        data: {\n          token: 'mock-token',\n          refreshToken: 'mock-refresh-token',\n        },\n      })\n    } else if (username === 'user' && password === '12345678') {\n      localStorage.setItem('role', 'User')\n      localStorage.setItem('username', 'user')\n      resolve({\n        data: {\n          token: 'mock-token',\n          refreshToken: 'mock-refresh-token',\n        },\n      })\n    } else {\n      reject(new Error('Invalid credentials'))\n    }\n  })\n}\n\n// Loglar mock\nexport const getLogs = async () => {\n  return Promise.resolve({\n    data: [\n      { id: 1, username: 'admin', type: 'BG', createdDate: '2025-10-01 10:00' },\n      { id: 2, username: 'admin', type: 'PD', createdDate: '2025-10-01 11:00' },\n      { id: 3, username: 'admin', type: 'LO', createdDate: '2025-10-01 12:00' },\n    ],\n  })\n}\n\n// Roller mock\nexport const getRoles = async () => {\n  return Promise.resolve({\n    data: [\n      { id: 1, name: 'Admin' },\n      { id: 2, name: 'User' },\n    ],\n  })\n}\n\n// Kullanıcılar mock\nexport const getUsers = async () => {\n  return Promise.resolve({\n    data: [\n      {\n        id: 1,\n        username: 'admin',\n        firstName: 'Sema',\n        lastName: 'Özyılmaz',\n        email: 'admin@smartspirit.ai',\n        phoneNumber: '555-1234',\n        role: 'Admin',\n        status: 'active',\n      },\n      {\n        id: 2,\n        username: 'user',\n        firstName: 'Ali',\n        lastName: 'Yılmaz',\n        email: 'user@smartspirit.ai',\n        phoneNumber: '555-5678',\n        role: 'User',\n        status: 'passive',\n      },\n    ],\n  })\n}\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,SAAS,GAAG,MAAAA,CAAO;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EACzD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAIJ,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,UAAU,EAAE;MACnDI,YAAY,CAACC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC;MACrCD,YAAY,CAACC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC;MACzCH,OAAO,CAAC;QACNI,IAAI,EAAE;UACJC,KAAK,EAAE,YAAY;UACnBC,YAAY,EAAE;QAChB;MACF,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIT,QAAQ,KAAK,MAAM,IAAIC,QAAQ,KAAK,UAAU,EAAE;MACzDI,YAAY,CAACC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC;MACpCD,YAAY,CAACC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC;MACxCH,OAAO,CAAC;QACNI,IAAI,EAAE;UACJC,KAAK,EAAE,YAAY;UACnBC,YAAY,EAAE;QAChB;MACF,CAAC,CAAC;IACJ,CAAC,MAAM;MACLL,MAAM,CAAC,IAAIM,KAAK,CAAC,qBAAqB,CAAC,CAAC;IAC1C;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAA,KAAY;EACjC,OAAOT,OAAO,CAACC,OAAO,CAAC;IACrBI,IAAI,EAAE,CACJ;MAAEK,EAAE,EAAE,CAAC;MAAEZ,QAAQ,EAAE,OAAO;MAAEa,IAAI,EAAE,IAAI;MAAEC,WAAW,EAAE;IAAmB,CAAC,EACzE;MAAEF,EAAE,EAAE,CAAC;MAAEZ,QAAQ,EAAE,OAAO;MAAEa,IAAI,EAAE,IAAI;MAAEC,WAAW,EAAE;IAAmB,CAAC,EACzE;MAAEF,EAAE,EAAE,CAAC;MAAEZ,QAAQ,EAAE,OAAO;MAAEa,IAAI,EAAE,IAAI;MAAEC,WAAW,EAAE;IAAmB,CAAC;EAE7E,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,OAAOb,OAAO,CAACC,OAAO,CAAC;IACrBI,IAAI,EAAE,CACJ;MAAEK,EAAE,EAAE,CAAC;MAAEI,IAAI,EAAE;IAAQ,CAAC,EACxB;MAAEJ,EAAE,EAAE,CAAC;MAAEI,IAAI,EAAE;IAAO,CAAC;EAE3B,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,OAAOf,OAAO,CAACC,OAAO,CAAC;IACrBI,IAAI,EAAE,CACJ;MACEK,EAAE,EAAE,CAAC;MACLZ,QAAQ,EAAE,OAAO;MACjBkB,SAAS,EAAE,MAAM;MACjBC,QAAQ,EAAE,UAAU;MACpBC,KAAK,EAAE,sBAAsB;MAC7BC,WAAW,EAAE,UAAU;MACvBC,IAAI,EAAE,OAAO;MACbC,MAAM,EAAE;IACV,CAAC,EACD;MACEX,EAAE,EAAE,CAAC;MACLZ,QAAQ,EAAE,MAAM;MAChBkB,SAAS,EAAE,KAAK;MAChBC,QAAQ,EAAE,QAAQ;MAClBC,KAAK,EAAE,qBAAqB;MAC5BC,WAAW,EAAE,UAAU;MACvBC,IAAI,EAAE,MAAM;MACZC,MAAM,EAAE;IACV,CAAC;EAEL,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}