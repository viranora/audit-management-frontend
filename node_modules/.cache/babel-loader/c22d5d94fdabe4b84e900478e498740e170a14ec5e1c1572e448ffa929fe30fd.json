{"ast":null,"code":"/*import axios from 'axios'\n\nconst API = axios.create({\n  baseURL: 'http://localhost:8080/api',\n})\n\nexport const loginUser = data => API.post('/auth/login', data)\nexport const getLogs = () => API.get('/logs')\nexport const getRoles = () => API.get('/roles')\nexport const getUsers = () => API.get('/users')\n*/\n// MOCK login fonksiyonu\nexport const loginUser = async ({\n  username,\n  password\n}) => {\n  return new Promise((resolve, reject) => {\n    if (username === 'admin' && password === '12345678') {\n      resolve({\n        data: {\n          token: 'mock-token',\n          refreshToken: 'mock-refresh-token'\n        }\n      });\n    } else {\n      reject(new Error('Invalid credentials'));\n    }\n  });\n};","map":{"version":3,"names":["loginUser","username","password","Promise","resolve","reject","data","token","refreshToken","Error"],"sources":["/Users/sema/Desktop/project/frontend/src/services/api.js"],"sourcesContent":["/*import axios from 'axios'\n\nconst API = axios.create({\n  baseURL: 'http://localhost:8080/api',\n})\n\nexport const loginUser = data => API.post('/auth/login', data)\nexport const getLogs = () => API.get('/logs')\nexport const getRoles = () => API.get('/roles')\nexport const getUsers = () => API.get('/users')\n*/\n// MOCK login fonksiyonu\nexport const loginUser = async ({ username, password }) => {\n  return new Promise((resolve, reject) => {\n    if (username === 'admin' && password === '12345678') {\n      resolve({\n        data: {\n          token: 'mock-token',\n          refreshToken: 'mock-refresh-token',\n        },\n      })\n    } else {\n      reject(new Error('Invalid credentials'))\n    }\n  })\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,SAAS,GAAG,MAAAA,CAAO;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EACzD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAIJ,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,UAAU,EAAE;MACnDE,OAAO,CAAC;QACNE,IAAI,EAAE;UACJC,KAAK,EAAE,YAAY;UACnBC,YAAY,EAAE;QAChB;MACF,CAAC,CAAC;IACJ,CAAC,MAAM;MACLH,MAAM,CAAC,IAAII,KAAK,CAAC,qBAAqB,CAAC,CAAC;IAC1C;EACF,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}